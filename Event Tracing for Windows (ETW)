Event Tracing for Windows (ETW): Tracing facility provided by Windows

- Great for real-time monitoring

- Microsogt Message Analyzer and PowerShell's Get-WinEvent are great tools for analyzing 
and parsing these ETW logs.


ETW Architecture & Components

- Controllers: It encompasses functionalities such as initiating and terminating trace sessions, 
as well as enabling or disabling providers within a particular trace. Trace sessions can establish 
subscriptions to one or multiple providers, thereby granting the providers the ability to commence 
logging operations. An example of a widely used controller is the built-in utility "logman.exe," which 
facilitates the management of ETW activities.


Core of ETW's architecture is the publish-subscriber model with two primary components:

- Providers: Applications have the ability to register ETW providers, enabling them to generate and 
transmit numerous events. There are four distinct types of providers utilized within ETW.

  - MOF Providers: These providers are based on Managed Object Format (MOF) and are capable of generating
events according to predefined MOF schemas. They offer a flexible approach to event generation and are
widely used in varius scenarios.

  - WPP Providers: Standing for "Windows SOftware Trace Preprocessor," WPP providers leverage specialized
macros and annotations within the application's source code to generate events. This type of provider is often
utilized for low-level kernel-mode tracing and debugging purposes.

  - Manifest-based Providers: Manifest-based providers represent a more contemporary form of providers within
ETW. They rely on XML manifest files that define the structure and characteristics of events. This approach 
offers enhanced flexibility and ease of management, allowing for dynamic event generation and customization.

  - TraceLogging Providers: TraceLogging providers offer a simplified and efficient approach to event generation. 
They leverage the TraceLogging API, introduced in recent Windows versions, which streamlines the process of event 
generation with minimal code overhead.

- Consumers: Consumers subscribe to specific events of interest and receive those events for further processing or 
analysis. By default, the events are typically directed to an .ETL (Event Trace Log) file for handling. However, an 
alternative consumer scenario involves leveraging the capabilities of the Windows API to process and consume the 
events.

- Channels: Event channels act as logical containers for organizing and filtering events based on their characteristics 
and importance. ETW supports multiple channels, each with its own defined purpose and audience. Event consumers can 
selectively subscribe to specific channels to receive relevant events for their respective use cases.

- ETL files: These files serve as durable storage for events, enabling offline analysis, long-term archiving, and forensic 
investigations. ETW allows for seamless rotation and management of ETL files to ensure efficient storage utilization.




Interacting With ETW:

- The Logman utility is pre-installed for managing ETW and ETW sessions.

- logman.exe query -ets
  - Allows for a direct investigation of the event tracing sessions

- logman.exe query "[provider]" -ets will give us the following:
  - Name/Provider GUID: This is the exclusive identifier for the provider
  - Level: This describes the event level, indicating if it's filtering for warning, information, critical, or all events
  - Keywords Any: Keywords create a filter based on the kind of event generated by the provider.

- logman.exe query providers
  - Generates a list of all available providers on the system, including their respective GUIDs

- logman.exe query providers | findstr "Windlogon"
  - Good for filtering the list to only relevant names


There are GUI-based alternatives for certain providers:
- Performance Monitor tool is good to visualize various running trace sessions. 


Useful Providers:

- Microsoft-Windows-Kernel-Process: This ETW provider is instrumental in monitoring process-related activity within the Windows 
kernel. It can aid in detecting unusual process behaviors such as process injection, process hollowing, and other tactics commonly 
used by malware and advanced persistent threats (APTs).

- Microsoft-Windows-Kernel-File: As the name suggests, this provider focuses on file-related operations. It can be employed for 
detection scenarios involving unauthorized file access, changes to critical system files, or suspicious file operations indicative of 
exfiltration or ransomware activity.

- Microsoft-Windows-Kernel-Network: This ETW provider offers visibility into network-related activity at the kernel level. It's especially 
useful in detecting network-based attacks such as data exfiltration, unauthorized network connections, and potential signs of command and 
control (C2) communication.

- Microsoft-Windows-SMBClient/SMBServer: These providers monitor Server Message Block (SMB) client and server activity, providing insights 
into file sharing and network communication. They can be used to detect unusual SMB traffic patterns, potentially indicating lateral movement 
or data exfiltration.

- Microsoft-Windows-DotNETRuntime: This provider focuses on .NET runtime events, making it ideal for identifying anomalies in .NET application 
execution, potential exploitation of .NET vulnerabilities, or malicious .NET assembly loading.

- OpenSSH: Monitoring the OpenSSH ETW provider can provide important insights into Secure Shell (SSH) connection attempts, successful and failed 
authentications, and potential brute force attacks.

- Microsoft-Windows-VPN-Client: This provider enables tracking of Virtual Private Network (VPN) client events. It can be useful for identifying 
unauthorized or suspicious VPN connections.

- Microsoft-Windows-PowerShell: This ETW provider tracks PowerShell execution and command activity, making it invaluable for detecting suspicious 
PowerShell usage, script block logging, and potential misuse or exploitation.

- Microsoft-Windows-Kernel-Registry: This provider monitors registry operations, making it useful for detection scenarios related to changes in 
registry keys, often associated with persistence mechanisms, malware installation, or system configuration changes.

- Microsoft-Windows-CodeIntegrity: This provider monitors code and driver integrity checks, which can be key in identifying attempts to load unsigned 
or malicious drivers or code.

- Microsoft-Antimalware-Service: This ETW provider can be employed to detect potential issues with the antimalware service, including disabled services, 
configuration changes, or potential evasion techniques employed by malware.

- WinRM: Monitoring the Windows Remote Management (WinRM) provider can reveal unauthorized or suspicious remote management activity, often indicative of 
lateral movement or remote command execution.

- Microsoft-Windows-TerminalServices-LocalSessionManager: This provider tracks local Terminal Services sessions, making it useful for detecting unauthorized 
or suspicious remote desktop activity.

- Microsoft-Windows-Security-Mitigations: This provider keeps tabs on the effectiveness and operations of security mitigations in place. It's essential for 
identifying potential bypass attempts of these security controls.

- Microsoft-Windows-DNS-Client: This ETW provider gives visibility into DNS client activity, which is crucial for detecting DNS-based attacks, including DNS 
tunneling or unusual DNS requests that may indicate C2 communication.

- Microsoft-Antimalware-Protection: This provider monitors the operations of antimalware protection mechanisms. It can be used to detect any issues with these 
mechanisms, such as disabled protection features, configuration changes, or signs of evasion techniques employed by malicious actors.







